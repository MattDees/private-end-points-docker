#!/usr/bin/python

from contextlib import closing
import socket
import os
import sys
import grp
import pwd
import json
from daemon import Daemon
from os.path import join

# This should go to configurations
PWD = "/usr/local/unbound-1.7/etc/unbound/"
run_dir = "{PWD}var/run/".format(PWD=PWD)
socket_path = "{run_dir}dns_filter.sock".format(run_dir=run_dir)


class FileList():
    """
    """
    @staticmethod
    def __get_entry(file):
        with open(file) as fyl:
            for entry in fyl:
                yield entry.strip()

    def load(self, pwd=None):
        if pwd:
            self.pwd = pwd
        try:
            for file in os.listdir(self.pwd):
                if file.endswith('.txt'):
                    for domain in self.__get_entry(self.pwd + file):
                        self.entries.add(domain)
        except OSError as e:
            if e.errno == 2:
                print("Missing directory: " + e.filename)
            else:
                raise

    def __init__(self, pwd=PWD, _type):
        """
        Build entries from file.
        """
        self.type = _type
        self.load(pwd)

    def response(self, domain_type, domain, conn):
        if domain_type in self.type:
            if domain in self.entries:
                resp = True
            else:
                resp = False
            conn.sendall(json.dumps(resp))


class run_filter(Daemon):
    def run(self):
        blacklist = FileList(pwd=f"{PWD}/blacklist", _type="blacklist")
        whitelist = FileList(pwd=f"{PWD}/whitelist", _type="whitelist")
        try:
            os.unlink(socket_path)
        except OSError:
            if os.path.exists(socket_path):
                raise
        sock = socket.socket()
        with closing(sock):
            sock.bind(socket_path)
            sock.listen(1)
            if not os.path.exists(run_dir):
                os.makedirs(run_dir)
            uid = pwd.getpwnam("unbound").pw_uid
            gid = grp.getgrnam("unbound").gr_gid
            os.chown(socket_path, uid, gid)
            while True:
                connection, address = sock.accept()
                with closing(connection):
                    data = connection.recv(2048)
                    data = json.loads(data)
                    print(data)
                    for list_obj in [blacklist, whitelist]:
                        list_obj.response(data['domain_list'].strip(),
                                          data['domain'].strip(),
                                          connection)


pid_file = "/usr/local/unbound-1.7/etc/unbound/var/run/dns-filter.pid"

if __name__ == "__main__":
    daemon = run_filter(pid_file)
    if len(sys.argv) == 2:

        if 'start' == sys.argv[1]:
            try:
                daemon.start()
            except Exception as e:
                pass

        elif 'stop' == sys.argv[1]:
            daemon.stop()
            os.unlink(socket_path)

        elif 'restart' == sys.argv[1]:
            daemon.restart()

        elif 'status' == sys.argv[1]:
            try:
                pf = file(pid_file, 'r')
                pid = int(pf.read().strip())
                pf.close()
            except IOError:
                pid = None
            except SystemExit:
                pid = None

            if pid:
                print 'dns-filter is running with pid %s' % pid
            else:
                print 'dns-filter is not running.'

        else:
            print "Unknown command"
            sys.exit(2)
            sys.exit(0)
    else:
        print "usage: %s start|stop|restart|status" % sys.argv[0]
        sys.exit(2)
