#!/usr/bin/python

import socket
import os
import sys
import grp
import pwd
import json
from daemon import Daemon
from os.path import join

blacklist_location = "/usr/local/unbound-1.7/etc/unbound/blacklists"
whitelist_file = "/usr/local/unbound-1.7/etc/unbound/whitelist.txt"
run_dir = "/usr/local/unbound-1.7/etc/unbound/var/run"
socket_file = "/usr/local/unbound-1.7/etc/unbound/var/run/dns_filter.sock"
uid = pwd.getpwnam("unbound").pw_uid
gid = grp.getgrnam("unbound").gr_gid

if not os.path.exists(run_dir):
    os.makedirs(run_dir)

blacklist = set()
whitelist = set()

def file_to_domains(file):
    with open(file) as fyl:
        for entry in fyl:
            yield entry.strip()

def load_blacklists():
    try:
        for file in os.listdir(blacklist_location):
            if file.endswith('.txt'):
                for domain in file_to_domains(join(blacklist_location, file)):
                    blacklist.add(domain)
    except OSError as e:
        if e.errno == 2:
            print("Missing directory: " + e.filename)
        else:
            raise

def load_whitelist():
    try:
        for domain in file_to_domains(whitelist_file):
            whitelist.add(domain)
    except IOError as e:
        if e.errno == 2:
            print("Missing file: " + e.filename)
        else:
            raise

def check_name(domain, domain_list):
    if domain_list == 'blacklist':
        if (domain in blacklist):
            return True
        else:
            return False

    if domain_list == 'whitelist':
        if (domain in whitelist):
            return True
        else:
            return False

load_whitelist()
load_blacklists()

def dns_filter():
    try:
    	os.unlink(socket_file)
    except OSError:
    	if os.path.exists(socket_file):
            raise

    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.bind(socket_file)
    sock.listen(1)
    os.chown(socket_file, uid, gid)

    while True:
    	connection, client_address = sock.accept()
    	try:
            data = connection.recv(2048)
            data = json.loads(data)
       	    print (data)
            domain_check_result = check_name(data['domain'].strip(), data['domain_list'].strip())
    	    connection.sendall(json.dumps(domain_check_result))
    	finally:
            connection.close()

class run_filter(Daemon):
    def run(self):
    	dns_filter()

pid_file = "/usr/local/unbound-1.7/etc/unbound/var/run/dns-filter.pid"

if __name__ == "__main__":
    daemon = run_filter(pid_file)
    if len(sys.argv) == 2:

        if 'start' == sys.argv[1]:
            try:
                daemon.start()
            except:
                pass

        elif 'stop' == sys.argv[1]:
            daemon.stop()
	    os.unlink(socket_file)

        elif 'restart' == sys.argv[1]:
            daemon.restart()

        elif 'status' == sys.argv[1]:
            try:
                pf = file(pid_file,'r')
                pid = int(pf.read().strip())
                pf.close()
            except IOError:
                pid = None
            except SystemExit:
                pid = None

            if pid:
                print 'dns-filter is running with pid %s' % pid
            else:
                print 'dns-filter is not running.'

        else:
            print "Unknown command"
            sys.exit(2)
            sys.exit(0)
    else:
        print "usage: %s start|stop|restart|status" % sys.argv[0]
	sys.exit(2)

